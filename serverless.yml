service: serverless-stepf-store-checkout

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  lambdaHashingVersion: 20201221

plugins:
  - serverless-step-functions
  - serverless-export-env
  - serverless-iam-roles-per-function

custom:
  stage: ${opt:stage, self:provider.stage}
  export-env:
    overwrite: true

functions:
  checkInventory:
    handler: src/functions/checkInventory.handler
    environment:
      BOOK_TABLE: !Ref BookTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !GetAtt BookTable.Arn
  calculateTotal:
    handler: src/functions/calculateTotal.handler
  redeemPoints:
    handler: src/functions/redeemPoints.handler
    USER_TABLE: !Ref UserTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt UserTable.Arn
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !GetAtt UserTable.Arn
  billCustomer:
    handler: src/functions/billCustomer.handler

resources:
  Resources:
    BookTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
        Tags:
          - Key: Name
            Value: book-table
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        Tags:
          - Key: Name
            Value: user-table
  Outputs:
    BookTableName:
      Value: !Ref BookTable
    UserTableName:
      Value: !Ref UserTable

stepFunctions:
  stateMachines:
    storeCheckoutFlow:
      name: storeCheckoutFlow
      definition:
        StartAt: checkInventory
        States:
          checkInventory:
            Type: Task
            Resource:
              Fn::GetAtt: [checkInventory, Arn]
            Catch:
              - ErrorEquals: [BookNotFound]
                Next: BookNotFoundError
              - ErrorEquals: [BookOutOfStock]
                Next: BookOutOfStockError
            ResultPath: "$.book"
            Next: calculateTotal
          calculateTotal:
            Type: Task
            Resource:
              Fn::GetAtt: [calculateTotal, Arn]
            ResultPath: "$.total"
            End: isRedeemNeeded
          isRedeemNeeded:
            Type: Choice
            Choices:
              - Variable: $.redeem
                BooleanEquals: true
                Next: RedeemPoints
            Default: BillCustomer
          RedeemPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [redeemPoints, Arn]
            ResultPath: "$.total"
            Catch:
              - ErrorEquals: [States.ALL]
                Next: RedeemPointsError
            Next: BillCustomer
          BillCustomer:
            Type: Task
            Resource:
              Fn::GetAtt: [billCustomer, Arn]
              ResultPath: "$.billingStatus"
            Next: PrepareOrder
          BookNotFoundError:
            Type: Pass
            Result: "No such book available"
            End: true
          BookOutOfStockError:
            Type: Pass
            Result: "Sorry, the book is out of stock"
            End: true
          RedeemPointsError:
            Type: Pass
            Result: "Error in redeeming points"
            End: true
